<?php
/**
 * ReservationRoom
 *
 * PHP version 5
 *
 * @category Class
 * @package  PlugAndTravel
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PlugAndTravel.BookingAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PlugAndTravel\Client\Models;

use \ArrayAccess;

/**
 * ReservationRoom Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     PlugAndTravel
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ReservationRoom implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ReservationRoom';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'id' => 'int',
        'confirmation_code' => 'string',
        'provider_reservation_group_code' => 'string',
        'name' => 'string',
        'bed_type' => '\PlugAndTravel\Client\Models\BedType',
        'status' => '\PlugAndTravel\Client\Models\ReservationStatus',
        'check_in' => 'string',
        'check_out' => 'string',
        'hotel_details' => '\PlugAndTravel\Client\Models\HotelDetails',
        'operation_info' => '\PlugAndTravel\Client\Models\OperationInfo[]',
        'cancellation_deadline' => 'string',
        'meal' => '\PlugAndTravel\Client\Models\Meal',
        'occupancy' => '\PlugAndTravel\Client\Models\Occupancy',
        'guest' => '\PlugAndTravel\Client\Models\Guest',
        'provider' => 'string',
        'reservation_price' => '\PlugAndTravel\Client\Models\ReservationPrice',
        'currency' => 'string',
        'is_non_refundable' => 'bool',
        'cancellation_policies' => '\PlugAndTravel\Client\Models\CancellationPolicy[]',
        'essential_informations' => 'string[]',
        'remarks' => 'string[]'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'id' => 'Id',
        'confirmation_code' => 'ConfirmationCode',
        'provider_reservation_group_code' => 'ProviderReservationGroupCode',
        'name' => 'Name',
        'bed_type' => 'BedType',
        'status' => 'Status',
        'check_in' => 'CheckIn',
        'check_out' => 'CheckOut',
        'hotel_details' => 'HotelDetails',
        'operation_info' => 'OperationInfo',
        'cancellation_deadline' => 'CancellationDeadline',
        'meal' => 'Meal',
        'occupancy' => 'Occupancy',
        'guest' => 'Guest',
        'provider' => 'Provider',
        'reservation_price' => 'ReservationPrice',
        'currency' => 'Currency',
        'is_non_refundable' => 'IsNonRefundable',
        'cancellation_policies' => 'CancellationPolicies',
        'essential_informations' => 'EssentialInformations',
        'remarks' => 'Remarks'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'id' => 'setId',
        'confirmation_code' => 'setConfirmationCode',
        'provider_reservation_group_code' => 'setProviderReservationGroupCode',
        'name' => 'setName',
        'bed_type' => 'setBedType',
        'status' => 'setStatus',
        'check_in' => 'setCheckIn',
        'check_out' => 'setCheckOut',
        'hotel_details' => 'setHotelDetails',
        'operation_info' => 'setOperationInfo',
        'cancellation_deadline' => 'setCancellationDeadline',
        'meal' => 'setMeal',
        'occupancy' => 'setOccupancy',
        'guest' => 'setGuest',
        'provider' => 'setProvider',
        'reservation_price' => 'setReservationPrice',
        'currency' => 'setCurrency',
        'is_non_refundable' => 'setIsNonRefundable',
        'cancellation_policies' => 'setCancellationPolicies',
        'essential_informations' => 'setEssentialInformations',
        'remarks' => 'setRemarks'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'id' => 'getId',
        'confirmation_code' => 'getConfirmationCode',
        'provider_reservation_group_code' => 'getProviderReservationGroupCode',
        'name' => 'getName',
        'bed_type' => 'getBedType',
        'status' => 'getStatus',
        'check_in' => 'getCheckIn',
        'check_out' => 'getCheckOut',
        'hotel_details' => 'getHotelDetails',
        'operation_info' => 'getOperationInfo',
        'cancellation_deadline' => 'getCancellationDeadline',
        'meal' => 'getMeal',
        'occupancy' => 'getOccupancy',
        'guest' => 'getGuest',
        'provider' => 'getProvider',
        'reservation_price' => 'getReservationPrice',
        'currency' => 'getCurrency',
        'is_non_refundable' => 'getIsNonRefundable',
        'cancellation_policies' => 'getCancellationPolicies',
        'essential_informations' => 'getEssentialInformations',
        'remarks' => 'getRemarks'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['confirmation_code'] = isset($data['confirmation_code']) ? $data['confirmation_code'] : null;
        $this->container['provider_reservation_group_code'] = isset($data['provider_reservation_group_code']) ? $data['provider_reservation_group_code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['bed_type'] = isset($data['bed_type']) ? $data['bed_type'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['check_in'] = isset($data['check_in']) ? $data['check_in'] : null;
        $this->container['check_out'] = isset($data['check_out']) ? $data['check_out'] : null;
        $this->container['hotel_details'] = isset($data['hotel_details']) ? $data['hotel_details'] : null;
        $this->container['operation_info'] = isset($data['operation_info']) ? $data['operation_info'] : null;
        $this->container['cancellation_deadline'] = isset($data['cancellation_deadline']) ? $data['cancellation_deadline'] : null;
        $this->container['meal'] = isset($data['meal']) ? $data['meal'] : null;
        $this->container['occupancy'] = isset($data['occupancy']) ? $data['occupancy'] : null;
        $this->container['guest'] = isset($data['guest']) ? $data['guest'] : null;
        $this->container['provider'] = isset($data['provider']) ? $data['provider'] : null;
        $this->container['reservation_price'] = isset($data['reservation_price']) ? $data['reservation_price'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['is_non_refundable'] = isset($data['is_non_refundable']) ? $data['is_non_refundable'] : null;
        $this->container['cancellation_policies'] = isset($data['cancellation_policies']) ? $data['cancellation_policies'] : null;
        $this->container['essential_informations'] = isset($data['essential_informations']) ? $data['essential_informations'] : null;
        $this->container['remarks'] = isset($data['remarks']) ? $data['remarks'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalid_properties[] = "'status' can't be null";
        }
        if ($this->container['check_in'] === null) {
            $invalid_properties[] = "'check_in' can't be null";
        }
        if ($this->container['check_out'] === null) {
            $invalid_properties[] = "'check_out' can't be null";
        }
        if ($this->container['meal'] === null) {
            $invalid_properties[] = "'meal' can't be null";
        }
        if ($this->container['occupancy'] === null) {
            $invalid_properties[] = "'occupancy' can't be null";
        }
        if ($this->container['guest'] === null) {
            $invalid_properties[] = "'guest' can't be null";
        }
        if ($this->container['provider'] === null) {
            $invalid_properties[] = "'provider' can't be null";
        }
        if ($this->container['reservation_price'] === null) {
            $invalid_properties[] = "'reservation_price' can't be null";
        }
        if ($this->container['is_non_refundable'] === null) {
            $invalid_properties[] = "'is_non_refundable' can't be null";
        }
        if ($this->container['cancellation_policies'] === null) {
            $invalid_properties[] = "'cancellation_policies' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        if ($this->container['check_in'] === null) {
            return false;
        }
        if ($this->container['check_out'] === null) {
            return false;
        }
        if ($this->container['meal'] === null) {
            return false;
        }
        if ($this->container['occupancy'] === null) {
            return false;
        }
        if ($this->container['guest'] === null) {
            return false;
        }
        if ($this->container['provider'] === null) {
            return false;
        }
        if ($this->container['reservation_price'] === null) {
            return false;
        }
        if ($this->container['is_non_refundable'] === null) {
            return false;
        }
        if ($this->container['cancellation_policies'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Unique id that identifies the reservation in our system
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets confirmation_code
     * @return string
     */
    public function getConfirmationCode()
    {
        return $this->container['confirmation_code'];
    }

    /**
     * Sets confirmation_code
     * @param string $confirmation_code Unique code that identifies the confirmed reservation in provider system
     * @return $this
     */
    public function setConfirmationCode($confirmation_code)
    {
        $this->container['confirmation_code'] = $confirmation_code;

        return $this;
    }

    /**
     * Gets provider_reservation_group_code
     * @return string
     */
    public function getProviderReservationGroupCode()
    {
        return $this->container['provider_reservation_group_code'];
    }

    /**
     * Sets provider_reservation_group_code
     * @param string $provider_reservation_group_code Unique code that identifies the reservation group in provider system.               Possible means of the field per provider:              - for Expedia: ItineraryId              - for Jumbo: ServiceLocator
     * @return $this
     */
    public function setProviderReservationGroupCode($provider_reservation_group_code)
    {
        $this->container['provider_reservation_group_code'] = $provider_reservation_group_code;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Room name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets bed_type
     * @return \PlugAndTravel\Client\Models\BedType
     */
    public function getBedType()
    {
        return $this->container['bed_type'];
    }

    /**
     * Sets bed_type
     * @param \PlugAndTravel\Client\Models\BedType $bed_type Chosen bed type (if any)
     * @return $this
     */
    public function setBedType($bed_type)
    {
        $this->container['bed_type'] = $bed_type;

        return $this;
    }

    /**
     * Gets status
     * @return \PlugAndTravel\Client\Models\ReservationStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param \PlugAndTravel\Client\Models\ReservationStatus $status Booking status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets check_in
     * @return string
     */
    public function getCheckIn()
    {
        return $this->container['check_in'];
    }

    /**
     * Sets check_in
     * @param string $check_in Check-in date of the booked room
     * @return $this
     */
    public function setCheckIn($check_in)
    {
        $this->container['check_in'] = $check_in;

        return $this;
    }

    /**
     * Gets check_out
     * @return string
     */
    public function getCheckOut()
    {
        return $this->container['check_out'];
    }

    /**
     * Sets check_out
     * @param string $check_out Check-out date of the booked room
     * @return $this
     */
    public function setCheckOut($check_out)
    {
        $this->container['check_out'] = $check_out;

        return $this;
    }

    /**
     * Gets hotel_details
     * @return \PlugAndTravel\Client\Models\HotelDetails
     */
    public function getHotelDetails()
    {
        return $this->container['hotel_details'];
    }

    /**
     * Sets hotel_details
     * @param \PlugAndTravel\Client\Models\HotelDetails $hotel_details Hotel details of the booked room
     * @return $this
     */
    public function setHotelDetails($hotel_details)
    {
        $this->container['hotel_details'] = $hotel_details;

        return $this;
    }

    /**
     * Gets operation_info
     * @return \PlugAndTravel\Client\Models\OperationInfo[]
     */
    public function getOperationInfo()
    {
        return $this->container['operation_info'];
    }

    /**
     * Sets operation_info
     * @param \PlugAndTravel\Client\Models\OperationInfo[] $operation_info Indicates dates for operations that was made or can be performed on the reservation (Example: CreationDate, CancellationDate)
     * @return $this
     */
    public function setOperationInfo($operation_info)
    {
        $this->container['operation_info'] = $operation_info;

        return $this;
    }

    /**
     * Gets cancellation_deadline
     * @return string
     */
    public function getCancellationDeadline()
    {
        return $this->container['cancellation_deadline'];
    }

    /**
     * Sets cancellation_deadline
     * @param string $cancellation_deadline The last date when you can cancel without charges
     * @return $this
     */
    public function setCancellationDeadline($cancellation_deadline)
    {
        $this->container['cancellation_deadline'] = $cancellation_deadline;

        return $this;
    }

    /**
     * Gets meal
     * @return \PlugAndTravel\Client\Models\Meal
     */
    public function getMeal()
    {
        return $this->container['meal'];
    }

    /**
     * Sets meal
     * @param \PlugAndTravel\Client\Models\Meal $meal Meal plan associated with the room booked
     * @return $this
     */
    public function setMeal($meal)
    {
        $this->container['meal'] = $meal;

        return $this;
    }

    /**
     * Gets occupancy
     * @return \PlugAndTravel\Client\Models\Occupancy
     */
    public function getOccupancy()
    {
        return $this->container['occupancy'];
    }

    /**
     * Sets occupancy
     * @param \PlugAndTravel\Client\Models\Occupancy $occupancy Occupancy accomodated in this room
     * @return $this
     */
    public function setOccupancy($occupancy)
    {
        $this->container['occupancy'] = $occupancy;

        return $this;
    }

    /**
     * Gets guest
     * @return \PlugAndTravel\Client\Models\Guest
     */
    public function getGuest()
    {
        return $this->container['guest'];
    }

    /**
     * Sets guest
     * @param \PlugAndTravel\Client\Models\Guest $guest Main guest name
     * @return $this
     */
    public function setGuest($guest)
    {
        $this->container['guest'] = $guest;

        return $this;
    }

    /**
     * Gets provider
     * @return string
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     * @param string $provider 
     * @return $this
     */
    public function setProvider($provider)
    {
        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets reservation_price
     * @return \PlugAndTravel\Client\Models\ReservationPrice
     */
    public function getReservationPrice()
    {
        return $this->container['reservation_price'];
    }

    /**
     * Sets reservation_price
     * @param \PlugAndTravel\Client\Models\ReservationPrice $reservation_price
     * @return $this
     */
    public function setReservationPrice($reservation_price)
    {
        $this->container['reservation_price'] = $reservation_price;

        return $this;
    }

    /**
     * Gets currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param string $currency Booking currency code
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets is_non_refundable
     * @return bool
     */
    public function getIsNonRefundable()
    {
        return $this->container['is_non_refundable'];
    }

    /**
     * Sets is_non_refundable
     * @param bool $is_non_refundable Indicates explicitly if the reservation can be refunded or not
     * @return $this
     */
    public function setIsNonRefundable($is_non_refundable)
    {
        $this->container['is_non_refundable'] = $is_non_refundable;

        return $this;
    }

    /**
     * Gets cancellation_policies
     * @return \PlugAndTravel\Client\Models\CancellationPolicy[]
     */
    public function getCancellationPolicies()
    {
        return $this->container['cancellation_policies'];
    }

    /**
     * Sets cancellation_policies
     * @param \PlugAndTravel\Client\Models\CancellationPolicy[] $cancellation_policies
     * @return $this
     */
    public function setCancellationPolicies($cancellation_policies)
    {
        $this->container['cancellation_policies'] = $cancellation_policies;

        return $this;
    }

    /**
     * Gets essential_informations
     * @return string[]
     */
    public function getEssentialInformations()
    {
        return $this->container['essential_informations'];
    }

    /**
     * Sets essential_informations
     * @param string[] $essential_informations Informations sent by supplier as: Bar closed, Lobby closed, Pool in renovation etc
     * @return $this
     */
    public function setEssentialInformations($essential_informations)
    {
        $this->container['essential_informations'] = $essential_informations;

        return $this;
    }

    /**
     * Gets remarks
     * @return string[]
     */
    public function getRemarks()
    {
        return $this->container['remarks'];
    }

    /**
     * Sets remarks
     * @param string[] $remarks Useful information about the reservation, like cancellation e-mail for Jumbo provider
     * @return $this
     */
    public function setRemarks($remarks)
    {
        $this->container['remarks'] = $remarks;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\PlugAndTravel\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\PlugAndTravel\ObjectSerializer::sanitizeForSerialization($this));
    }
}


