<?php
/**
 * HotelDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  PlugAndTravel
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PlugAndTravel.BookingAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PlugAndTravel\Client\Models;

use \ArrayAccess;

/**
 * HotelDetails Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     PlugAndTravel
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class HotelDetails implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'HotelDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'hotel_code' => 'string',
        'provider_hotel_code' => 'string',
        'name' => 'string',
        'address' => 'string',
        'destination' => 'string',
        'thumb' => 'string',
        'geo_location' => '\PlugAndTravel\Client\Models\GeoLocation',
        'rating' => '\PlugAndTravel\Client\Models\Rating'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'hotel_code' => 'HotelCode',
        'provider_hotel_code' => 'ProviderHotelCode',
        'name' => 'Name',
        'address' => 'Address',
        'destination' => 'Destination',
        'thumb' => 'Thumb',
        'geo_location' => 'GeoLocation',
        'rating' => 'Rating'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'hotel_code' => 'setHotelCode',
        'provider_hotel_code' => 'setProviderHotelCode',
        'name' => 'setName',
        'address' => 'setAddress',
        'destination' => 'setDestination',
        'thumb' => 'setThumb',
        'geo_location' => 'setGeoLocation',
        'rating' => 'setRating'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'hotel_code' => 'getHotelCode',
        'provider_hotel_code' => 'getProviderHotelCode',
        'name' => 'getName',
        'address' => 'getAddress',
        'destination' => 'getDestination',
        'thumb' => 'getThumb',
        'geo_location' => 'getGeoLocation',
        'rating' => 'getRating'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['hotel_code'] = isset($data['hotel_code']) ? $data['hotel_code'] : null;
        $this->container['provider_hotel_code'] = isset($data['provider_hotel_code']) ? $data['provider_hotel_code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['destination'] = isset($data['destination']) ? $data['destination'] : null;
        $this->container['thumb'] = isset($data['thumb']) ? $data['thumb'] : null;
        $this->container['geo_location'] = isset($data['geo_location']) ? $data['geo_location'] : null;
        $this->container['rating'] = isset($data['rating']) ? $data['rating'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets hotel_code
     * @return string
     */
    public function getHotelCode()
    {
        return $this->container['hotel_code'];
    }

    /**
     * Sets hotel_code
     * @param string $hotel_code System hotel code
     * @return $this
     */
    public function setHotelCode($hotel_code)
    {
        $this->container['hotel_code'] = $hotel_code;

        return $this;
    }

    /**
     * Gets provider_hotel_code
     * @return string
     */
    public function getProviderHotelCode()
    {
        return $this->container['provider_hotel_code'];
    }

    /**
     * Sets provider_hotel_code
     * @param string $provider_hotel_code Provider hotel code
     * @return $this
     */
    public function setProviderHotelCode($provider_hotel_code)
    {
        $this->container['provider_hotel_code'] = $provider_hotel_code;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Hotel name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets address
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     * @param string $address Hotel adddress
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets destination
     * @return string
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     * @param string $destination 
     * @return $this
     */
    public function setDestination($destination)
    {
        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets thumb
     * @return string
     */
    public function getThumb()
    {
        return $this->container['thumb'];
    }

    /**
     * Sets thumb
     * @param string $thumb Main image of the hotel
     * @return $this
     */
    public function setThumb($thumb)
    {
        $this->container['thumb'] = $thumb;

        return $this;
    }

    /**
     * Gets geo_location
     * @return \PlugAndTravel\Client\Models\GeoLocation
     */
    public function getGeoLocation()
    {
        return $this->container['geo_location'];
    }

    /**
     * Sets geo_location
     * @param \PlugAndTravel\Client\Models\GeoLocation $geo_location Latidude and longitude of the hotel
     * @return $this
     */
    public function setGeoLocation($geo_location)
    {
        $this->container['geo_location'] = $geo_location;

        return $this;
    }

    /**
     * Gets rating
     * @return \PlugAndTravel\Client\Models\Rating
     */
    public function getRating()
    {
        return $this->container['rating'];
    }

    /**
     * Sets rating
     * @param \PlugAndTravel\Client\Models\Rating $rating Hotel rating : rating level and type.
     * @return $this
     */
    public function setRating($rating)
    {
        $this->container['rating'] = $rating;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\PlugAndTravel\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\PlugAndTravel\ObjectSerializer::sanitizeForSerialization($this));
    }
}


