<?php
/**
 * HotelAvailabilityRS
 *
 * PHP version 5
 *
 * @category Class
 * @package  PlugAndTravel
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PlugAndTravel.BookingAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PlugAndTravel\Client\Models;

use \ArrayAccess;

/**
 * HotelAvailabilityRS Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     PlugAndTravel
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class HotelAvailabilityRS implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'HotelAvailabilityRS';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'booking_flow_id' => 'string',
        'request_duration' => 'int',
        'time_stamp' => 'string',
        'hotels' => '\PlugAndTravel\Client\Models\Hotel[]',
        'error' => '\PlugAndTravel\Client\Models\Error'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'booking_flow_id' => 'BookingFlowId',
        'request_duration' => 'RequestDuration',
        'time_stamp' => 'TimeStamp',
        'hotels' => 'Hotels',
        'error' => 'Error'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'booking_flow_id' => 'setBookingFlowId',
        'request_duration' => 'setRequestDuration',
        'time_stamp' => 'setTimeStamp',
        'hotels' => 'setHotels',
        'error' => 'setError'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'booking_flow_id' => 'getBookingFlowId',
        'request_duration' => 'getRequestDuration',
        'time_stamp' => 'getTimeStamp',
        'hotels' => 'getHotels',
        'error' => 'getError'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['booking_flow_id'] = isset($data['booking_flow_id']) ? $data['booking_flow_id'] : null;
        $this->container['request_duration'] = isset($data['request_duration']) ? $data['request_duration'] : null;
        $this->container['time_stamp'] = isset($data['time_stamp']) ? $data['time_stamp'] : null;
        $this->container['hotels'] = isset($data['hotels']) ? $data['hotels'] : null;
        $this->container['error'] = isset($data['error']) ? $data['error'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['booking_flow_id'] === null) {
            $invalid_properties[] = "'booking_flow_id' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['booking_flow_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets booking_flow_id
     * @return string
     */
    public function getBookingFlowId()
    {
        return $this->container['booking_flow_id'];
    }

    /**
     * Sets booking_flow_id
     * @param string $booking_flow_id Unique id (GUID) used to identify all requests starting from HotelAvailability. This will be generated for every HotelAvailability request and you must use it later in CheckRates and  Book requests.
     * @return $this
     */
    public function setBookingFlowId($booking_flow_id)
    {
        $this->container['booking_flow_id'] = $booking_flow_id;

        return $this;
    }

    /**
     * Gets request_duration
     * @return int
     */
    public function getRequestDuration()
    {
        return $this->container['request_duration'];
    }

    /**
     * Sets request_duration
     * @param int $request_duration Number of milliseconds spent on server until request completion.
     * @return $this
     */
    public function setRequestDuration($request_duration)
    {
        $this->container['request_duration'] = $request_duration;

        return $this;
    }

    /**
     * Gets time_stamp
     * @return string
     */
    public function getTimeStamp()
    {
        return $this->container['time_stamp'];
    }

    /**
     * Sets time_stamp
     * @param string $time_stamp UTC time when request has completed.
     * @return $this
     */
    public function setTimeStamp($time_stamp)
    {
        $this->container['time_stamp'] = $time_stamp;

        return $this;
    }

    /**
     * Gets hotels
     * @return \PlugAndTravel\Client\Models\Hotel[]
     */
    public function getHotels()
    {
        return $this->container['hotels'];
    }

    /**
     * Sets hotels
     * @param \PlugAndTravel\Client\Models\Hotel[] $hotels Available hotels
     * @return $this
     */
    public function setHotels($hotels)
    {
        $this->container['hotels'] = $hotels;

        return $this;
    }

    /**
     * Gets error
     * @return \PlugAndTravel\Client\Models\Error
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     * @param \PlugAndTravel\Client\Models\Error $error Details with any error arised
     * @return $this
     */
    public function setError($error)
    {
        $this->container['error'] = $error;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\PlugAndTravel\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\PlugAndTravel\ObjectSerializer::sanitizeForSerialization($this));
    }
}


