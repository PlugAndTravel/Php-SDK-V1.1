<?php
/**
 * CheckHotelRatesRQ
 *
 * PHP version 5
 *
 * @category Class
 * @package  PlugAndTravel
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PlugAndTravel.BookingAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PlugAndTravel\Client\Models;

use \ArrayAccess;

/**
 * CheckHotelRatesRQ Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     PlugAndTravel
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CheckHotelRatesRQ implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CheckHotelRatesRQ';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'booking_flow_id' => 'string',
        'customer_ip_address' => 'string',
        'customer_user_agent' => 'string',
        'check_in' => 'string',
        'check_out' => 'string',
        'passenger_country' => 'string',
        'room_group' => '\PlugAndTravel\Client\Models\RoomGroupRQ'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'booking_flow_id' => 'BookingFlowId',
        'customer_ip_address' => 'CustomerIpAddress',
        'customer_user_agent' => 'CustomerUserAgent',
        'check_in' => 'CheckIn',
        'check_out' => 'CheckOut',
        'passenger_country' => 'PassengerCountry',
        'room_group' => 'RoomGroup'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'booking_flow_id' => 'setBookingFlowId',
        'customer_ip_address' => 'setCustomerIpAddress',
        'customer_user_agent' => 'setCustomerUserAgent',
        'check_in' => 'setCheckIn',
        'check_out' => 'setCheckOut',
        'passenger_country' => 'setPassengerCountry',
        'room_group' => 'setRoomGroup'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'booking_flow_id' => 'getBookingFlowId',
        'customer_ip_address' => 'getCustomerIpAddress',
        'customer_user_agent' => 'getCustomerUserAgent',
        'check_in' => 'getCheckIn',
        'check_out' => 'getCheckOut',
        'passenger_country' => 'getPassengerCountry',
        'room_group' => 'getRoomGroup'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['booking_flow_id'] = isset($data['booking_flow_id']) ? $data['booking_flow_id'] : null;
        $this->container['customer_ip_address'] = isset($data['customer_ip_address']) ? $data['customer_ip_address'] : null;
        $this->container['customer_user_agent'] = isset($data['customer_user_agent']) ? $data['customer_user_agent'] : null;
        $this->container['check_in'] = isset($data['check_in']) ? $data['check_in'] : null;
        $this->container['check_out'] = isset($data['check_out']) ? $data['check_out'] : null;
        $this->container['passenger_country'] = isset($data['passenger_country']) ? $data['passenger_country'] : null;
        $this->container['room_group'] = isset($data['room_group']) ? $data['room_group'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['booking_flow_id'] === null) {
            $invalid_properties[] = "'booking_flow_id' can't be null";
        }
        if ($this->container['customer_ip_address'] === null) {
            $invalid_properties[] = "'customer_ip_address' can't be null";
        }
        if ($this->container['customer_user_agent'] === null) {
            $invalid_properties[] = "'customer_user_agent' can't be null";
        }
        if ($this->container['check_in'] === null) {
            $invalid_properties[] = "'check_in' can't be null";
        }
        if ($this->container['check_out'] === null) {
            $invalid_properties[] = "'check_out' can't be null";
        }
        if ($this->container['passenger_country'] === null) {
            $invalid_properties[] = "'passenger_country' can't be null";
        }
        if ($this->container['room_group'] === null) {
            $invalid_properties[] = "'room_group' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['booking_flow_id'] === null) {
            return false;
        }
        if ($this->container['customer_ip_address'] === null) {
            return false;
        }
        if ($this->container['customer_user_agent'] === null) {
            return false;
        }
        if ($this->container['check_in'] === null) {
            return false;
        }
        if ($this->container['check_out'] === null) {
            return false;
        }
        if ($this->container['passenger_country'] === null) {
            return false;
        }
        if ($this->container['room_group'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets booking_flow_id
     * @return string
     */
    public function getBookingFlowId()
    {
        return $this->container['booking_flow_id'];
    }

    /**
     * Sets booking_flow_id
     * @param string $booking_flow_id Unique id (GUID) used to identify all requests starting from HotelAvailability. This should be generated for every HotelAvailability request and used later in every request that fallows (CheckRates, Book, GetReservation, Cancel)
     * @return $this
     */
    public function setBookingFlowId($booking_flow_id)
    {
        $this->container['booking_flow_id'] = $booking_flow_id;

        return $this;
    }

    /**
     * Gets customer_ip_address
     * @return string
     */
    public function getCustomerIpAddress()
    {
        return $this->container['customer_ip_address'];
    }

    /**
     * Sets customer_ip_address
     * @param string $customer_ip_address IPV4 address of the final customer
     * @return $this
     */
    public function setCustomerIpAddress($customer_ip_address)
    {
        $this->container['customer_ip_address'] = $customer_ip_address;

        return $this;
    }

    /**
     * Gets customer_user_agent
     * @return string
     */
    public function getCustomerUserAgent()
    {
        return $this->container['customer_user_agent'];
    }

    /**
     * Sets customer_user_agent
     * @param string $customer_user_agent Customer useragent used for this request.
     * @return $this
     */
    public function setCustomerUserAgent($customer_user_agent)
    {
        $this->container['customer_user_agent'] = $customer_user_agent;

        return $this;
    }

    /**
     * Gets check_in
     * @return string
     */
    public function getCheckIn()
    {
        return $this->container['check_in'];
    }

    /**
     * Sets check_in
     * @param string $check_in
     * @return $this
     */
    public function setCheckIn($check_in)
    {
        $this->container['check_in'] = $check_in;

        return $this;
    }

    /**
     * Gets check_out
     * @return string
     */
    public function getCheckOut()
    {
        return $this->container['check_out'];
    }

    /**
     * Sets check_out
     * @param string $check_out
     * @return $this
     */
    public function setCheckOut($check_out)
    {
        $this->container['check_out'] = $check_out;

        return $this;
    }

    /**
     * Gets passenger_country
     * @return string
     */
    public function getPassengerCountry()
    {
        return $this->container['passenger_country'];
    }

    /**
     * Sets passenger_country
     * @param string $passenger_country Passenger country of residence.
     * @return $this
     */
    public function setPassengerCountry($passenger_country)
    {
        $this->container['passenger_country'] = $passenger_country;

        return $this;
    }

    /**
     * Gets room_group
     * @return \PlugAndTravel\Client\Models\RoomGroupRQ
     */
    public function getRoomGroup()
    {
        return $this->container['room_group'];
    }

    /**
     * Sets room_group
     * @param \PlugAndTravel\Client\Models\RoomGroupRQ $room_group RoomGroup obtained with HotelAvailability method.
     * @return $this
     */
    public function setRoomGroup($room_group)
    {
        $this->container['room_group'] = $room_group;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\PlugAndTravel\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\PlugAndTravel\ObjectSerializer::sanitizeForSerialization($this));
    }
}


