<?php
/**
 * RoomRS
 *
 * PHP version 5
 *
 * @category Class
 * @package  PlugAndTravel
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PlugAndTravel.BookingAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PlugAndTravel\Client\Models;

use \ArrayAccess;

/**
 * RoomRS Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     PlugAndTravel
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RoomRS implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RoomRS';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'code' => 'string',
        'name' => 'string',
        'bed_types' => '\PlugAndTravel\Client\Models\BedType[]',
        'hotel_code' => 'string',
        'provider_hotel_code' => 'string',
        'provider' => 'string',
        'tokens' => '\PlugAndTravel\Client\Models\Token[]',
        'occupancy' => '\PlugAndTravel\Client\Models\Occupancy',
        'price_changed' => 'bool',
        'price' => '\PlugAndTravel\Client\Models\Price',
        'currency' => 'string',
        'is_non_refundable' => 'bool',
        'cancellation_policies' => '\PlugAndTravel\Client\Models\CancellationPolicy[]',
        'room_supplements' => '\PlugAndTravel\Client\Models\RoomSupplement[]',
        'person_supplements' => '\PlugAndTravel\Client\Models\PersonSupplement[]',
        'room_taxes' => '\PlugAndTravel\Client\Models\RoomTax[]',
        'essential_information' => 'string[]',
        'meal' => '\PlugAndTravel\Client\Models\Meal'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'code' => 'Code',
        'name' => 'Name',
        'bed_types' => 'BedTypes',
        'hotel_code' => 'HotelCode',
        'provider_hotel_code' => 'ProviderHotelCode',
        'provider' => 'Provider',
        'tokens' => 'Tokens',
        'occupancy' => 'Occupancy',
        'price_changed' => 'PriceChanged',
        'price' => 'Price',
        'currency' => 'Currency',
        'is_non_refundable' => 'IsNonRefundable',
        'cancellation_policies' => 'CancellationPolicies',
        'room_supplements' => 'RoomSupplements',
        'person_supplements' => 'PersonSupplements',
        'room_taxes' => 'RoomTaxes',
        'essential_information' => 'EssentialInformation',
        'meal' => 'Meal'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'code' => 'setCode',
        'name' => 'setName',
        'bed_types' => 'setBedTypes',
        'hotel_code' => 'setHotelCode',
        'provider_hotel_code' => 'setProviderHotelCode',
        'provider' => 'setProvider',
        'tokens' => 'setTokens',
        'occupancy' => 'setOccupancy',
        'price_changed' => 'setPriceChanged',
        'price' => 'setPrice',
        'currency' => 'setCurrency',
        'is_non_refundable' => 'setIsNonRefundable',
        'cancellation_policies' => 'setCancellationPolicies',
        'room_supplements' => 'setRoomSupplements',
        'person_supplements' => 'setPersonSupplements',
        'room_taxes' => 'setRoomTaxes',
        'essential_information' => 'setEssentialInformation',
        'meal' => 'setMeal'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'code' => 'getCode',
        'name' => 'getName',
        'bed_types' => 'getBedTypes',
        'hotel_code' => 'getHotelCode',
        'provider_hotel_code' => 'getProviderHotelCode',
        'provider' => 'getProvider',
        'tokens' => 'getTokens',
        'occupancy' => 'getOccupancy',
        'price_changed' => 'getPriceChanged',
        'price' => 'getPrice',
        'currency' => 'getCurrency',
        'is_non_refundable' => 'getIsNonRefundable',
        'cancellation_policies' => 'getCancellationPolicies',
        'room_supplements' => 'getRoomSupplements',
        'person_supplements' => 'getPersonSupplements',
        'room_taxes' => 'getRoomTaxes',
        'essential_information' => 'getEssentialInformation',
        'meal' => 'getMeal'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['bed_types'] = isset($data['bed_types']) ? $data['bed_types'] : null;
        $this->container['hotel_code'] = isset($data['hotel_code']) ? $data['hotel_code'] : null;
        $this->container['provider_hotel_code'] = isset($data['provider_hotel_code']) ? $data['provider_hotel_code'] : null;
        $this->container['provider'] = isset($data['provider']) ? $data['provider'] : null;
        $this->container['tokens'] = isset($data['tokens']) ? $data['tokens'] : null;
        $this->container['occupancy'] = isset($data['occupancy']) ? $data['occupancy'] : null;
        $this->container['price_changed'] = isset($data['price_changed']) ? $data['price_changed'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['is_non_refundable'] = isset($data['is_non_refundable']) ? $data['is_non_refundable'] : null;
        $this->container['cancellation_policies'] = isset($data['cancellation_policies']) ? $data['cancellation_policies'] : null;
        $this->container['room_supplements'] = isset($data['room_supplements']) ? $data['room_supplements'] : null;
        $this->container['person_supplements'] = isset($data['person_supplements']) ? $data['person_supplements'] : null;
        $this->container['room_taxes'] = isset($data['room_taxes']) ? $data['room_taxes'] : null;
        $this->container['essential_information'] = isset($data['essential_information']) ? $data['essential_information'] : null;
        $this->container['meal'] = isset($data['meal']) ? $data['meal'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['code'] === null) {
            $invalid_properties[] = "'code' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['hotel_code'] === null) {
            $invalid_properties[] = "'hotel_code' can't be null";
        }
        if ($this->container['provider_hotel_code'] === null) {
            $invalid_properties[] = "'provider_hotel_code' can't be null";
        }
        if ($this->container['provider'] === null) {
            $invalid_properties[] = "'provider' can't be null";
        }
        if ($this->container['tokens'] === null) {
            $invalid_properties[] = "'tokens' can't be null";
        }
        if ($this->container['occupancy'] === null) {
            $invalid_properties[] = "'occupancy' can't be null";
        }
        if ($this->container['price_changed'] === null) {
            $invalid_properties[] = "'price_changed' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalid_properties[] = "'price' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalid_properties[] = "'currency' can't be null";
        }
        if ($this->container['is_non_refundable'] === null) {
            $invalid_properties[] = "'is_non_refundable' can't be null";
        }
        if ($this->container['cancellation_policies'] === null) {
            $invalid_properties[] = "'cancellation_policies' can't be null";
        }
        if ($this->container['meal'] === null) {
            $invalid_properties[] = "'meal' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['code'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['hotel_code'] === null) {
            return false;
        }
        if ($this->container['provider_hotel_code'] === null) {
            return false;
        }
        if ($this->container['provider'] === null) {
            return false;
        }
        if ($this->container['tokens'] === null) {
            return false;
        }
        if ($this->container['occupancy'] === null) {
            return false;
        }
        if ($this->container['price_changed'] === null) {
            return false;
        }
        if ($this->container['price'] === null) {
            return false;
        }
        if ($this->container['currency'] === null) {
            return false;
        }
        if ($this->container['is_non_refundable'] === null) {
            return false;
        }
        if ($this->container['cancellation_policies'] === null) {
            return false;
        }
        if ($this->container['meal'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets code
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     * @param string $code Unique code that identifies the room
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets bed_types
     * @return \PlugAndTravel\Client\Models\BedType[]
     */
    public function getBedTypes()
    {
        return $this->container['bed_types'];
    }

    /**
     * Sets bed_types
     * @param \PlugAndTravel\Client\Models\BedType[] $bed_types A list of bed types from you can choose when you will book this room. If more than one bedtype is returned, is mandatory to choose one when booking the room.               The chosen bed type is not guaranteed by supplier.
     * @return $this
     */
    public function setBedTypes($bed_types)
    {
        $this->container['bed_types'] = $bed_types;

        return $this;
    }

    /**
     * Gets hotel_code
     * @return string
     */
    public function getHotelCode()
    {
        return $this->container['hotel_code'];
    }

    /**
     * Sets hotel_code
     * @param string $hotel_code
     * @return $this
     */
    public function setHotelCode($hotel_code)
    {
        $this->container['hotel_code'] = $hotel_code;

        return $this;
    }

    /**
     * Gets provider_hotel_code
     * @return string
     */
    public function getProviderHotelCode()
    {
        return $this->container['provider_hotel_code'];
    }

    /**
     * Sets provider_hotel_code
     * @param string $provider_hotel_code
     * @return $this
     */
    public function setProviderHotelCode($provider_hotel_code)
    {
        $this->container['provider_hotel_code'] = $provider_hotel_code;

        return $this;
    }

    /**
     * Gets provider
     * @return string
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     * @param string $provider
     * @return $this
     */
    public function setProvider($provider)
    {
        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets tokens
     * @return \PlugAndTravel\Client\Models\Token[]
     */
    public function getTokens()
    {
        return $this->container['tokens'];
    }

    /**
     * Sets tokens
     * @param \PlugAndTravel\Client\Models\Token[] $tokens Tokens received from provider. Must be send back in Book method.
     * @return $this
     */
    public function setTokens($tokens)
    {
        $this->container['tokens'] = $tokens;

        return $this;
    }

    /**
     * Gets occupancy
     * @return \PlugAndTravel\Client\Models\Occupancy
     */
    public function getOccupancy()
    {
        return $this->container['occupancy'];
    }

    /**
     * Sets occupancy
     * @param \PlugAndTravel\Client\Models\Occupancy $occupancy
     * @return $this
     */
    public function setOccupancy($occupancy)
    {
        $this->container['occupancy'] = $occupancy;

        return $this;
    }

    /**
     * Gets price_changed
     * @return bool
     */
    public function getPriceChanged()
    {
        return $this->container['price_changed'];
    }

    /**
     * Sets price_changed
     * @param bool $price_changed Indicates if the room has the same price as requested one or price has changed
     * @return $this
     */
    public function setPriceChanged($price_changed)
    {
        $this->container['price_changed'] = $price_changed;

        return $this;
    }

    /**
     * Gets price
     * @return \PlugAndTravel\Client\Models\Price
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     * @param \PlugAndTravel\Client\Models\Price $price New price, if price has changed or old room price if price remains the same.
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param string $currency
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets is_non_refundable
     * @return bool
     */
    public function getIsNonRefundable()
    {
        return $this->container['is_non_refundable'];
    }

    /**
     * Sets is_non_refundable
     * @param bool $is_non_refundable Indicates explicitly if the reservation can be refunded or not after booking.              In case that room is nonrefundable, meaning after booking you will pay full amount in case of cancellation, you will receive no cancellation policies.
     * @return $this
     */
    public function setIsNonRefundable($is_non_refundable)
    {
        $this->container['is_non_refundable'] = $is_non_refundable;

        return $this;
    }

    /**
     * Gets cancellation_policies
     * @return \PlugAndTravel\Client\Models\CancellationPolicy[]
     */
    public function getCancellationPolicies()
    {
        return $this->container['cancellation_policies'];
    }

    /**
     * Sets cancellation_policies
     * @param \PlugAndTravel\Client\Models\CancellationPolicy[] $cancellation_policies
     * @return $this
     */
    public function setCancellationPolicies($cancellation_policies)
    {
        $this->container['cancellation_policies'] = $cancellation_policies;

        return $this;
    }

    /**
     * Gets room_supplements
     * @return \PlugAndTravel\Client\Models\RoomSupplement[]
     */
    public function getRoomSupplements()
    {
        return $this->container['room_supplements'];
    }

    /**
     * Sets room_supplements
     * @param \PlugAndTravel\Client\Models\RoomSupplement[] $room_supplements Is an extra service per room such as:  Disney tickets, airport transfer an so on.
     * @return $this
     */
    public function setRoomSupplements($room_supplements)
    {
        $this->container['room_supplements'] = $room_supplements;

        return $this;
    }

    /**
     * Gets person_supplements
     * @return \PlugAndTravel\Client\Models\PersonSupplement[]
     */
    public function getPersonSupplements()
    {
        return $this->container['person_supplements'];
    }

    /**
     * Sets person_supplements
     * @param \PlugAndTravel\Client\Models\PersonSupplement[] $person_supplements Is an extra service per person such as:  Disney tickets, airport transfer an so on.
     * @return $this
     */
    public function setPersonSupplements($person_supplements)
    {
        $this->container['person_supplements'] = $person_supplements;

        return $this;
    }

    /**
     * Gets room_taxes
     * @return \PlugAndTravel\Client\Models\RoomTax[]
     */
    public function getRoomTaxes()
    {
        return $this->container['room_taxes'];
    }

    /**
     * Sets room_taxes
     * @param \PlugAndTravel\Client\Models\RoomTax[] $room_taxes
     * @return $this
     */
    public function setRoomTaxes($room_taxes)
    {
        $this->container['room_taxes'] = $room_taxes;

        return $this;
    }

    /**
     * Gets essential_information
     * @return string[]
     */
    public function getEssentialInformation()
    {
        return $this->container['essential_information'];
    }

    /**
     * Sets essential_information
     * @param string[] $essential_information
     * @return $this
     */
    public function setEssentialInformation($essential_information)
    {
        $this->container['essential_information'] = $essential_information;

        return $this;
    }

    /**
     * Gets meal
     * @return \PlugAndTravel\Client\Models\Meal
     */
    public function getMeal()
    {
        return $this->container['meal'];
    }

    /**
     * Sets meal
     * @param \PlugAndTravel\Client\Models\Meal $meal
     * @return $this
     */
    public function setMeal($meal)
    {
        $this->container['meal'] = $meal;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\PlugAndTravel\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\PlugAndTravel\ObjectSerializer::sanitizeForSerialization($this));
    }
}


