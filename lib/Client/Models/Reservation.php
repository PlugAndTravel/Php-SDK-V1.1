<?php
/**
 * Reservation
 *
 * PHP version 5
 *
 * @category Class
 * @package  PlugAndTravel
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PlugAndTravel.BookingAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PlugAndTravel\Client\Models;

use \ArrayAccess;

/**
 * Reservation Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     PlugAndTravel
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Reservation implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Reservation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'id' => 'int',
        'request_duration' => 'int',
        'time_stamp' => 'string',
        'price_changed_after_booking' => 'bool',
        'price_after_booking' => 'double',
        'reservation_rooms' => '\PlugAndTravel\Client\Models\ReservationRoom[]'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'id' => 'Id',
        'request_duration' => 'RequestDuration',
        'time_stamp' => 'TimeStamp',
        'price_changed_after_booking' => 'PriceChangedAfterBooking',
        'price_after_booking' => 'PriceAfterBooking',
        'reservation_rooms' => 'ReservationRooms'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'id' => 'setId',
        'request_duration' => 'setRequestDuration',
        'time_stamp' => 'setTimeStamp',
        'price_changed_after_booking' => 'setPriceChangedAfterBooking',
        'price_after_booking' => 'setPriceAfterBooking',
        'reservation_rooms' => 'setReservationRooms'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'id' => 'getId',
        'request_duration' => 'getRequestDuration',
        'time_stamp' => 'getTimeStamp',
        'price_changed_after_booking' => 'getPriceChangedAfterBooking',
        'price_after_booking' => 'getPriceAfterBooking',
        'reservation_rooms' => 'getReservationRooms'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['request_duration'] = isset($data['request_duration']) ? $data['request_duration'] : null;
        $this->container['time_stamp'] = isset($data['time_stamp']) ? $data['time_stamp'] : null;
        $this->container['price_changed_after_booking'] = isset($data['price_changed_after_booking']) ? $data['price_changed_after_booking'] : null;
        $this->container['price_after_booking'] = isset($data['price_after_booking']) ? $data['price_after_booking'] : null;
        $this->container['reservation_rooms'] = isset($data['reservation_rooms']) ? $data['reservation_rooms'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['reservation_rooms'] === null) {
            $invalid_properties[] = "'reservation_rooms' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['reservation_rooms'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Unique id that identifies the reservation group in our system
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets request_duration
     * @return int
     */
    public function getRequestDuration()
    {
        return $this->container['request_duration'];
    }

    /**
     * Sets request_duration
     * @param int $request_duration Number of milliseconds spent on server until request completion.
     * @return $this
     */
    public function setRequestDuration($request_duration)
    {
        $this->container['request_duration'] = $request_duration;

        return $this;
    }

    /**
     * Gets time_stamp
     * @return string
     */
    public function getTimeStamp()
    {
        return $this->container['time_stamp'];
    }

    /**
     * Sets time_stamp
     * @param string $time_stamp UTC time when request has completed.
     * @return $this
     */
    public function setTimeStamp($time_stamp)
    {
        $this->container['time_stamp'] = $time_stamp;

        return $this;
    }

    /**
     * Gets price_changed_after_booking
     * @return bool
     */
    public function getPriceChangedAfterBooking()
    {
        return $this->container['price_changed_after_booking'];
    }

    /**
     * Sets price_changed_after_booking
     * @param bool $price_changed_after_booking Indicates if reservation was made with the requested price or price changed during booking flow
     * @return $this
     */
    public function setPriceChangedAfterBooking($price_changed_after_booking)
    {
        $this->container['price_changed_after_booking'] = $price_changed_after_booking;

        return $this;
    }

    /**
     * Gets price_after_booking
     * @return double
     */
    public function getPriceAfterBooking()
    {
        return $this->container['price_after_booking'];
    }

    /**
     * Sets price_after_booking
     * @param double $price_after_booking If price has changed during booking flow here you will find the new price
     * @return $this
     */
    public function setPriceAfterBooking($price_after_booking)
    {
        $this->container['price_after_booking'] = $price_after_booking;

        return $this;
    }

    /**
     * Gets reservation_rooms
     * @return \PlugAndTravel\Client\Models\ReservationRoom[]
     */
    public function getReservationRooms()
    {
        return $this->container['reservation_rooms'];
    }

    /**
     * Sets reservation_rooms
     * @param \PlugAndTravel\Client\Models\ReservationRoom[] $reservation_rooms
     * @return $this
     */
    public function setReservationRooms($reservation_rooms)
    {
        $this->container['reservation_rooms'] = $reservation_rooms;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\PlugAndTravel\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\PlugAndTravel\ObjectSerializer::sanitizeForSerialization($this));
    }
}


