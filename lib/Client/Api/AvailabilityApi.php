<?php
/**
 * AvailabilityApi
 * PHP version 5
 *
 * @category Class
 * @package  PlugAndTravel
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PlugAndTravel.BookingAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PlugAndTravel\Client\Api;

use \PlugAndTravel\Configuration;
use \PlugAndTravel\ApiClient;
use \PlugAndTravel\ApiException;
use \PlugAndTravel\ObjectSerializer;

/**
 * AvailabilityApi Class Doc Comment
 *
 * @category Class
 * @package  PlugAndTravel
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AvailabilityApi
{

    /**
     * API Client
     *
     * @var \PlugAndTravel\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \PlugAndTravel\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\PlugAndTravel\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://demo-interface.plugandtravel.com/Booking/v1.1');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \PlugAndTravel\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \PlugAndTravel\ApiClient $apiClient set the API client
     *
     * @return AvailabilityApi
     */
    public function setApiClient(\PlugAndTravel\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getHotelAvailability
     *
     * Method used to get hotel availability and prices
     *
     * @param string $hotel_availability_rq HotelAvailabilityRQ json/xml encode (required)
     * @param string $user_name User Name (required)
     * @param string $access_token Access Token (required)
     * @return \PlugAndTravel\Client\Models\HotelAvailabilityRS
     * @throws \PlugAndTravel\ApiException on non-2xx response
     */
    public function getHotelAvailability($hotel_availability_rq, $user_name, $access_token)
    {
        list($response) = $this->getHotelAvailabilityWithHttpInfo($hotel_availability_rq, $user_name, $access_token);
        return $response;
    }

    /**
     * Operation getHotelAvailabilityWithHttpInfo
     *
     * Method used to get hotel availability and prices
     *
     * @param string $hotel_availability_rq HotelAvailabilityRQ json/xml encode (required)
     * @param string $user_name User Name (required)
     * @param string $access_token Access Token (required)
     * @return Array of \PlugAndTravel\Client\Models\HotelAvailabilityRS, HTTP status code, HTTP response headers (array of strings)
     * @throws \PlugAndTravel\ApiException on non-2xx response
     */
    public function getHotelAvailabilityWithHttpInfo($hotel_availability_rq, $user_name, $access_token)
    {
        // verify the required parameter 'hotel_availability_rq' is set
        if ($hotel_availability_rq === null) {
            throw new \InvalidArgumentException('Missing the required parameter $hotel_availability_rq when calling getHotelAvailability');
        }
        // verify the required parameter 'user_name' is set
        if ($user_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_name when calling getHotelAvailability');
        }
        // verify the required parameter 'access_token' is set
        if ($access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $access_token when calling getHotelAvailability');
        }
        // parse inputs
        $resourcePath = "/api/HotelAvailability";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','text/json','application/xml','text/xml','application/x-www-form-urlencoded'));

        // query params
        if ($hotel_availability_rq !== null) {
            $queryParams['hotelAvailabilityRq'] = $this->apiClient->getSerializer()->toQueryValue($hotel_availability_rq);
        }
        // header params
        if ($user_name !== null) {
            $headerParams['UserName'] = $this->apiClient->getSerializer()->toHeaderValue($user_name);
        }
        // header params
        if ($access_token !== null) {
            $headerParams['AccessToken'] = $this->apiClient->getSerializer()->toHeaderValue($access_token);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('AccessToken');
        if (strlen($apiKey) !== 0) {
            $headerParams['AccessToken'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PlugAndTravel\Client\Models\HotelAvailabilityRS',
                '/api/HotelAvailability'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\PlugAndTravel\Client\Models\HotelAvailabilityRS', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PlugAndTravel\Client\Models\HotelAvailabilityRS', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
